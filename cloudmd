# MCP File Server - Project Context & Setup Guide

## Project Overview
**Project Name:** MCP File Server  
**Type:** Model Context Protocol (MCP) File Server Implementation  
**Status:** New project - initialization phase  
**Purpose:** Develop a robust file server that implements the Model Context Protocol for seamless integration with AI systems like Claude

## Project Scope & Objectives
This MCP File Server project aims to create a production-ready server that:
- Implements the MCP specification for file operations
- Provides secure file access and management
- Enables AI agents to interact with file systems safely
- Supports multiple file formats and operations (read, write, list, search)
- Includes proper authentication and authorization
- Offers both local and remote file access capabilities

## Technology Stack Recommendations
Based on MCP requirements and modern best practices:

### Backend
- **Runtime:** Node.js (TypeScript) - Industry standard for MCP implementations
- **Framework:** Express.js or Fastify - For HTTP server functionality
- **MCP Library:** @modelcontextprotocol/sdk - Official MCP SDK
- **File System:** Node.js fs/promises - Built-in async file operations
- **Security:** 
  - helmet - Security headers
  - rate-limiter-flexible - Rate limiting
  - jsonwebtoken - Authentication
- **Validation:** zod - Runtime type validation
- **Logging:** winston or pino - Structured logging
- **Testing:** vitest or jest - Unit and integration testing

### Development Tools
- **Build:** TypeScript compiler (tsc) or Vite
- **Linting:** ESLint with TypeScript rules
- **Formatting:** Prettier
- **Package Manager:** npm or pnpm
- **Process Manager:** PM2 (for production)

## Planned Architecture

### Core Components
1. **MCP Server Core** (`src/server/`)
   - Main MCP server implementation
   - Protocol handler and message routing
   - Connection management

2. **File Operations** (`src/files/`)
   - File system abstraction layer
   - CRUD operations (Create, Read, Update, Delete)
   - Directory traversal and listing
   - File search functionality

3. **Security Layer** (`src/security/`)
   - Authentication mechanisms
   - Authorization and permission checking
   - Path sanitization and validation
   - Rate limiting and abuse prevention

4. **Configuration** (`src/config/`)
   - Environment-based configuration
   - Server settings and limits
   - Security policies

5. **Utilities** (`src/utils/`)
   - Common helper functions
   - Error handling utilities
   - Logging utilities

### Project Structure
```
/
├── src/
│   ├── server/          # Main MCP server implementation
│   ├── files/           # File operation handlers
│   ├── security/        # Authentication & authorization
│   ├── config/          # Configuration management
│   ├── utils/           # Utility functions
│   └── types/           # TypeScript type definitions
├── tests/               # Test suites
├── docs/                # Documentation
├── config/              # Configuration files
└── scripts/             # Build and deployment scripts
```

## Development Workflow & Standards

### Setup Process
1. Initialize Node.js project with TypeScript
2. Install MCP SDK and core dependencies
3. Configure development environment (ESLint, Prettier, TypeScript)
4. Set up testing framework
5. Implement basic MCP server structure
6. Add file operation handlers progressively

### Code Standards
- **TypeScript:** Strict mode enabled, full type coverage
- **Naming:** camelCase for variables/functions, PascalCase for classes/types
- **Error Handling:** Always use proper error types, never throw strings
- **Async:** Prefer async/await over Promises chains
- **Validation:** Validate all inputs using Zod schemas
- **Security:** Never trust user input, always sanitize paths

### Testing Strategy
- Unit tests for all core functions
- Integration tests for MCP protocol compliance
- Security tests for path traversal and access control
- Performance tests for file operations
- Mock file system for isolated testing

## Security Considerations
This file server will handle file system access, making security paramount:

### Path Security
- Implement strict path sanitization
- Prevent directory traversal attacks (../, ..\)
- Whitelist allowed directories only
- Validate all file paths before operations

### Authentication & Authorization
- JWT-based authentication
- Role-based access control (RBAC)
- Per-directory permissions
- API rate limiting

### File Operation Security
- File size limits
- File type restrictions
- Virus scanning integration (future)
- Audit logging of all operations

## MCP Protocol Compliance
Ensure full compliance with MCP specification:
- Proper message format handling
- Error response formatting
- Connection lifecycle management
- Protocol versioning support

## Key Development Phases

### Phase 1: Foundation (Current)
- Project initialization and setup
- Basic MCP server scaffold
- Configuration system
- Development environment

### Phase 2: Core Implementation
- Basic file operations (read, write, list)
- MCP protocol implementation
- Error handling and validation

### Phase 3: Security & Production
- Authentication system
- Authorization and permissions
- Security hardening
- Performance optimization

### Phase 4: Advanced Features
- Advanced file search
- File watching/monitoring
- Backup and versioning
- Metrics and monitoring

## Environment Variables & Configuration
```
# Server Configuration
MCP_PORT=3000
MCP_HOST=localhost

# File System
ALLOWED_DIRECTORIES=/home/user/documents,/home/user/projects
MAX_FILE_SIZE=10MB
MAX_FILES_PER_DIRECTORY=1000

# Security
JWT_SECRET=your-secret-key
RATE_LIMIT_REQUESTS=100
RATE_LIMIT_WINDOW=900000

# Logging
LOG_LEVEL=info
LOG_FILE=logs/mcp-server.log
```

## Common Commands & Scripts
Once project is set up, these will be the standard commands:

```bash
# Development
npm run dev          # Start development server with hot reload
npm run build        # Build production bundle
npm run test         # Run test suite
npm run lint         # Run linting
npm run format       # Format code with Prettier

# Production
npm start            # Start production server
npm run logs         # View server logs
```

## Key Decisions & Rationale

### Why Node.js/TypeScript?
- Official MCP SDK support
- Excellent async I/O for file operations
- Strong typing for protocol compliance
- Rich ecosystem for security and utilities

### Why Express/Fastify?
- Mature HTTP server capabilities
- Middleware ecosystem for security
- WebSocket support for MCP transport
- Production-proven reliability

### Security-First Approach
Given file system access, security is prioritized from the beginning rather than retrofitted later.

## Development Notes & Reminders

### Critical Implementation Points
1. Always validate and sanitize file paths
2. Implement proper error boundaries
3. Log all file operations for audit trails
4. Use streaming for large file operations
5. Implement circuit breakers for external dependencies

### Testing Priorities
1. Security testing (path traversal, access control)
2. MCP protocol compliance
3. File operation correctness
4. Performance under load
5. Error handling edge cases

### Performance Considerations
- Stream large files instead of loading into memory
- Implement file operation caching where appropriate
- Use worker threads for CPU-intensive operations
- Monitor memory usage during bulk operations

## Future Enhancements
- Docker containerization
- Kubernetes deployment configs
- Prometheus metrics integration
- GraphQL API layer (in addition to MCP)
- File preview generation
- Real-time collaboration features

---

**Last Updated:** 2025-08-31  
**Next Review:** After Phase 1 completion

This cloudmd file serves as the single source of truth for project context, architecture decisions, and development guidelines. Update it as the project evolves to maintain accurate context for all future AI interactions.